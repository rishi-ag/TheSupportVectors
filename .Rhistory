A <- c(1.12,1.53,0.29,4.91,5.46,0.52,0.32,2.19,1.51,2.81,2.59,0.77,1.87,11.63)
B <- c(0.83,1.16,0.40,1.55,1.42,0.46,0.47,1.95,0.56,0.59,0.19)
logA <- log(A)
logB <- log(B)
boxplot(logA, logB, col = c("red", "blue"), notch = TRUE,
horizontal = FALSE, axes = TRUE,ylimit = c(-3,3),
names = c("Group A", "Group B"),ylab = "Duration time (hours)")
qnorm(p = 0.95,mean = 0,sd = 1)
qnorm(p = 0.95,mean = 0,sd = 1)
qnorm(p = 0.95,mean = 0,sd = 1)
qnorm(p = 0.95,mean = 0,sd = 1)
qnorm(p = 0.95,mean = 0,sd = 1)
?qnorm
as.character(1)
as.character(2.75)
as.numeric("1")
a <- as.character(1)
a
a+1
as.integer(TRUE)
as.logical(0)
as.logical(-8.34)
as.logical(100)
as.logical(0.1)
as.logical(-0.1)
(3.24)
as.integer(3.24)
as.integer(3.74)
as.integer(3.74)
as.integer(3.94)
as.integer(3.94)
as.numeric(5)
as.numeric(5)
as.integer(3.24)
nvec <- c(1, 2, 3)
nvec[2]
nvec <- c(1,4, 2, 3)
nvec[2]
nvec <- c(1, 2, 3)
nvec[2]
svec <- c("a", "b", "c")
svec[3]
1:5
seq(from = 2, to = 10, by = 2)
rep("Char", 3)
2 * nvec
as.character(nvec)
as.character(nvec)
mat <- matrix(c(nvec, nvec, nvec), ncol = 3)
mat
mat <- matrix(c(nvec, nvec), ncol = 3)
mat
mat <- matrix(c(nvec, nvec), ncol = 4)
mat
t(mat)
mat <- matrix(c(nvec), ncol = 4)
mat
c(nvec, nvec, nvec)
nvec
matrix(1:10,5)
matrix(1:10,ncol=5)
matrix(nrow=1:10,ncol=5)
matrix(nrow=1,ncol=5)
matrix(nrow=10,ncol=5)
mat <- matrix(c(nvec, nvec, nvec), ncol = 3)
mat
t(mat)
mylist <- list(country = c("Portugal", "Italy", "France", "Greece", "Spain"),
GDPRange = c(-3.9, 0.2), estimate_type = list("not available", "provisional", "estimated"))
mylist
mylist
mylist$country
mylist$estimate_type
mylist
names(mylist)
mylist$GDPRange
mylist <- list(country = c("Portugal", "Italy", "France", "Greece", "Spain"),
GDPRange = c(-3.9, 0.2), estimate_type = c("not available", "provisional", "estimated"))
mylist
mylist$estimate_type
mylist <- list(country = c("Portugal", "Italy", "France", "Greece", "Spain"),
GDPRange = c(-3.9, 0.2), estimate_type = list("not available", "provisional", "estimated"))
mylist
mylist$estimate_type
mylist <- list(country = c("Portugal", "Italy", "France", "Greece", "Spain"),
GDPRange = c(-3.9, 0.2), estimate_type = c("not available", "provisional", "estimated"))
mylist
mylist$estimate_type
mylist$estimate_type[2]
names(mylist)
mylist$GDPRange
mylist$country
countries <- data.frame(country = c("Portugal", "Italy", "France", "Greece", "Spain"),
GDPGrowth = c(-1.4, -1.9, 0.2, -3.9, -1.2),
provisionalEst = c(FALSE, FALSE, FALSE, TRUE, FALSE))
View(countries)
data.frame(5,2)
data.frame(1:10, 5,2)
data.frame(1:10)
data.frame(1:10,5,2)
data.frame(1:5, row.names = ade)
data.frame(1:5, row.names = "ade")
data.frame(1:5, row.names = rep("ade",5)
data.frame(1:5, row.names = rep("ade",5)
data.frame(1:5, row.names = rep("ade",5)
data.frame(1:5, row.names = rep("ade",5))
rep("ade",5)
data.frame(1:5)
, row.names = rep("ade",5)
countries
dim(countries)
names(countries)
countries[1, ]
countries[, 2]
countries$GDPGrowth
countries[, 2]
countries[, 2>0]
countries[, 2]
countries[countries$GDPGrowth > 0, ]
countries[countries$provisionalEst == FALSE, ]
countries[countries$provisionalEst = FALSE, ]
countries[countries$provisionalEst == FALSE, ]
countries[countries$country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
attach(countries)
attach(countries)
countries[GDPGrowth > 0, ] countries[provisionalEst == FALSE, ]
attach(countries)
detach(countries)
attach(countries)
countries[GDPGrowth > 0, ] countries[provisionalEst == FALSE, ]
countries[country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
countries$GDPGrowth
countries[1, ]
countries[, 2]
countries[countries$GDPGrowth > 0, ]
countries[countries$provisionalEst == FALSE, ]
countries[countries$country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
## check out the previous
attach(countries)
countries[GDPGrowth > 0, ] countries[provisionalEst == FALSE, ]
countries[country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
detach(countries)
countries[GDPGrowth > 0, ]
countries[provisionalEst == FALSE, ]
countries[country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
detach(countries)
attach(countries)
countries[GDPGrowth > 0, ]
countries[provisionalEst == FALSE, ]
countries[country %in% c("Portugal", "Italy", "France"), c("country", "GDPGrowth")]
detach(countries)
as.list(nvec)
list(svec)
mylist
(mylist)
as.vector(mylist)
class(mylist)
as.vector(mylist)
class(mylist)
svec
svec
class(svec)
as.vector(svec)
as.vector(svec)
class(svec)
as.numeric(nvec)
class(svec)
as.vectorc(svec)
as.vector(svec)
class(svec)
as.numeric(svec)
svec
class(svec)
as.vector(svec)
class(svec)
help(length)
?(length)
?length
help(length)
class(mtcars)
dim(mtcars)
names(mtcars)
summary(mtcars)
head(mtcars)
tail(mtcars,10)
table(mtcars$mpg)
mtcars$mpg
?table
qqqq <- table(mtcars$mpg)
qqqq
class(qqqq)
remove(qqqq)
summary(mtcars$mpg)
?aggregate
head(mtcars)
aggregate(mtcars$hp,by = mtcars$cyl, FUN = mean)
aggregate(mtcars$hp,by = "mtcars$cyl", FUN = mean)
aggregate(mtcars$hp,by = c("mtcars$cyl"), FUN = mean)
aggregate(mtcars$hp,by = list("mtcars$cyl"), FUN = mean)
head(mtcars)
tail(mtcars,10)
mtcars
?aggregate
mtcars$hp
aggregate(mtcars$hp,by = list("mtcars$cyl"), FUN = mean)
aggregate(mtcars$hp,by = ("mtcars$cyl"), FUN = mean)
aggregate(mtcars$hp,by = list(mtcars$cyl), FUN = mean)
?list(mtcars$cyl)
list(mtcars$cyl)
c(mtcars$cyl)
c(mtcars$cyl)
aggregate(mtcars$hp,by = c(mtcars$cyl), FUN = mean)
aggregate(mtcars$hp,by = list(mtcars$cyl), FUN = mean)
aggregate(mtcars$wt, by = list(carb), max)
names(mtcars)
aggregate(mtcars$wt, by = list(mtcars$carb), max)
aggregate(wt ~ carb, data=mtcars, FUN=max) # kernel's
?aggregate
install.packages(plyr)
install.packages("plyr")
library(plyr)
ddply(mtcars, .(cyl), summarize, avghp = mean(hp))
detach("package:plyr")
stripchart(mtcars$mpg, xlab = "Miles per gallon")
hist(mtcars$mpg, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, breaks = 10, main = "")
hist(mtcars$mpg, main = "")
hist(mtcars$mpg, breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10)
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 20, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 100, main = "")
hist(mtcars$mpg, col = "gray", breaks = 50, main = "")
?hist
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
hist(mtcars$mpg, col = "gray", breaks = 20, main = "")
hist(mtcars$mpg, col = "gray", breaks = 10, main = "")
d <- density(mtcars$mpg) # Compute the density data
plot(d, main = "") # Graph the results
plot(d) # Graph the results
"
plot(d, main = "") # Graph the results
plot(d, main = "") # Graph the results
plot(d, main = " ") # Graph the results
plot(d, main = "") # Graph the results
boxplot(mpg ~ cyl, data = mtcars, ylab = "MPG", xlab = "Number of Cylinders")
plot(x = mtcars$hp, y = mtcars$wt,
ylab = "Horsepower", xlab = "Weight (lb/1000)", pch = 16)
abline(lm(mtcars$wt ~ mtcars$hp), col = "red")
plot(x = mtcars$hp, y = mtcars$wt, ylab = "Horsepower",
xlab = "Weight (lb/1000)", pch = 16)
abline(lm(mtcars$wt ~ mtcars$hp), col = "red")
plot(x = mtcars$hp, y = mtcars$wt, ylab = "Horsepower",
xlab = "Weight (lb/1000)", pch = 50)
plot(x = mtcars$hp, y = mtcars$wt, ylab = "Horsepower",
xlab = "Weight (lb/1000)", pch = 15)
plot(x = mtcars$hp, y = mtcars$wt, ylab = "Horsepower",
xlab = "Weight (lb/1000)", pch = 16)
abline(lm(mtcars$wt ~ mtcars$hp), col = "red")
censusBCN <- read.table("MAP_SCENSAL.csv", header = TRUE, sep = ";")
names(censusBCN)
head(censusBCN$HOMES)
censusBCN$HOMES
stripchart(censusBCN$HOMES, xlab = "Homes")
hist(censusBCN$HOMES)
hist(censusBCN$HOMES, main = "")
hist(censusBCN$HOMES, main = "", col= "blue")
hist(censusBCN$HOMES, main = "", col= "blue", xlab = "Homes" )
hist(censusBCN$HOMES, main = "", col= "blue", xlab = "Homes" , xlim = 2000 )
View(censusBCN)
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 16)
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 1)
loessFit <- loess(NACIONALS ~ HOMES, data=censusBCN)$fitted
order <- order(BCN$HOMES)
order <- order(censusBCN$HOMES)
lines(x=censusBCN$HOMES[order], y=loessFit[order], col="Red", lwd=2)
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 1)
loessFit <- loess(NACIONALS ~ HOMES, data=censusBCN)$fitted
order <- order(censusBCN$HOMES)
lines(x=censusBCN$HOMES[order], y=loessFit[order], col="Red", lwd=2)
stripchart(censusBCN$HOMES, xlab = "Homes")
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 1)
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 1)
loessFit <- loess(NACIONALS ~ HOMES, data=censusBCN)$fitted
order <- order(censusBCN$HOMES)
lines(x=censusBCN$HOMES[order], y=loessFit[order], col="Red", lwd=2)
plot(x = censusBCN$NACIONALS, y = censusBCN$HOMES, ylab = "HOMES",
xlab = "NACIONALS", pch = 1)
censusBCN <- read.table("MAP_SCENSAL.csv", header = TRUE, sep = ";")
names(censusBCN)
head(censusBCN$HOMES)
head(censusBCN)
layout(matrix(c(1:12), 3, 4, byrow=TRUE))
layout(matrix(c(1:12), 3, 4, byrow=TRUE))
cens_hist <- lapply(
names(censusBCN)[2:11],
function(colName) {
hist(
censusBCN[[colName]], main=colName, xlab=""
)
}
)
cens_hist <- lapply(
names(censusBCN)[2:11],
function(colName) {
hist(
censusBCN[[colName]], main=colName, xlab=""
)
}
)
cens_hist <- lapply(
names(censusBCN)[2:11],
function(colName) {
hist(
censusBCN[[colName]], main=colName, xlab=""
)
}
)
plot(mtcars$mpg)
plot(mtcars$mpg)
mtcars$mpg
hist(mtcars$mpg)
plot(mtcars$mpg, main = "Miles per gallon for selected cars", ylab = "mpg", pch = 16, cex = 0.8, ylim = c(0,
max(mtcars$mpg)))
?vector
?vector()
1
1.5L
1L
Inf
attributes(matrix)
attributes(censusBCN)
attributes(countries)
countries
attributes(countries$row.names) <- "spain"
library(swirl)
swirl
0
q
0
00000
swirl
swirl()
library(swirl)
swirl()
ls()
?ls
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
setwd("C:/BGSE/TRIMESTER_2/Machine Learning/Competition")
read.csv("covtype.csv")
read.csv("covtype.txt")
read.csv("covtype.data")
frame.data <- read.csv("covtype.data")
frame.data_1000 <- head(frame.data, 1000)
names(frame.data_1000)
summary(frame.data_1000)
str(frame.data_1000)
row.names(frame.data_1000)
source("code/library.R")
install.packages("nnet")
library(nnet)
if(!require("glmnet"))install.packages("glmnet")
setwd("~/GitHub/TheSupportVectors")
source("code/library.R")
train <- get.train.data()
train.label <- train[[1]]
labels_df <- as.data.frame(train.label)
train.feat <- train[[2]]
feat_sample <- train.feat[1:1000,]
labels_sample <- labels_df[1:1000,]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
class(labels_sample)
class(train_sample)
class(feat_sample)
str(feat_sample)
labels_sample <- as.factor(labels_df[1:1000,])
class(train_sample)
class(labels_sample)
feat_sample[,11:54]<-as.factor(feat_sample[,11:54])
features[,10:53]<-as.data.frame(apply(features[,10:53],2,as.factor))
feat_sample[,10:53]<-as.data.frame(apply(feat_sample[,10:53],2,as.factor))
str(feat_sample)
feat_sample <- train.feat[1:1000,]
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
str(feat_sample)
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
class(labels_samples)
class(labels_sample)
model
train.feat <- train[[3]]
feat_sample <- train.feat[1:1000,]
feat_sample[,10:53]<-as.data.frame(apply(feat_sample[,10:53],2,as.factor))
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample<-feat_sample,1:3]
feat_sample<-feat_sample[,1:3]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
summary(model)
model
model$beta
p<-predict(model)
p<-predict(feat_sample,model)
p<-predict(as.matrix(feat_sample),model)
p<-predict(model,as.matrix(feat_sample))
table(p,labels_sample)
length(p)
length(labels_sample)
head(p)
str(p)
head(p[[1]])
p
View(p)
p<-predict(model,as.matrix(feat_sample),type="class")
head(p)
table(p,labels_sample)
unique(p)
feat_sample<-feat_sample[,1:15]
feat_sample <- train.feat[1:1000,]
feat_sample[,10:53]<-as.data.frame(apply(feat_sample[,10:53],2,as.factor))
feat_sample<-feat_sample[,1:15]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
feat_sample[,10:53]<-as.data.frame(apply(feat_sample[,10:53],2,as.factor))
feat_sample<-feat_sample[,1:10]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
str(train.feat)
feat_sample <- train.feat[1:1000,]
names(feat_sample)[10]
names(feat_sample)[11]
feat_sample <- train.feat[1:1000,]
names(feat_sample)[54]
names(feat_sample)[55]
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,1:10]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
dim(feat_sample)
length(labels_sample)
model<-glmnet(x=t(as.matrix(feat_sample)),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,1:6]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample<-feat_sample[,1:4]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
labels_sample <- as.factor(labels_df[1:1000,])
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,1:5]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
labels_sample <- as.factor(labels_df[1:1000,])
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,1:6]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
names(feat_sample)[5]
names(feat_sample)[6]
summary(feat_sample[,6])
sum(is.na(feat_sample[,6]))
feat_sample <- train.feat[1:1000,]
labels_sample <- as.factor(labels_df[1:1000,])
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,-6]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
feat_sample <- train.feat[1:1000,]
labels_sample <- as.factor(labels_df[1:1000,])
feat_sample[,11:54]<-as.data.frame(apply(feat_sample[,11:54],2,as.factor))
feat_sample<-feat_sample[,1:5]
model<-glmnet(x=as.matrix(feat_sample),y=labels_sample,family="multinomial",lambda=0)
str(feat_sample)
est.data <- get.test.data()
test.feat <- test.data[[2]]
test.feat[,10:53]<-as.data.frame(apply(test.feat[,10:53],2,as.factor))
test.sample<-test.sample[,1:5]
test.sample<-test.sample[,1:5]
test.data <- get.test.data()
test.feat <- test.data[[2]]
test.feat[,10:53]<-as.data.frame(apply(test.feat[,10:53],2,as.factor))
test.sample<-test.sample[,1:5]
test.feat<-test.feat[,1:5]
predict<-predict(model,test.feat)
predict<-predict(model,as.matrix(test.feat))
id <- read.csv(file = "data/Kaggle_Covertype_test_id.csv", header = T)[,1]
prediction <- data.frame(id =id, Cover_Type = predict)
source('~/GitHub/TheSupportVectors/code/library.R', echo=TRUE)
