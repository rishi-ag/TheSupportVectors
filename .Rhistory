}
library(class)
library("doParallel")
cores <- detectCores()
cores
cl <- makeCluster(cores)
registerDoParallel(cl)
?parLapply
library(class)
library("doParallel")
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = , k = k)
error <- sum(knn.sum != test.label) / length(test.label)
return(error)
}
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = , k = k)
error <- sum(knn.sum != test.label) / length(test.label)
return(error)
}
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl=cl, varlist=c("labels", "features", "features.std", "compare.k"))
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
cl <- makeCluster(cores)
clusterExport(cl=cl, varlist=c("labels", "features", "features.std", "compare.k", "knn.cv"))
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl=cl, varlist=c("labels", "features", "features.std", "compare.k", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "knn.cv"))
k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels))
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
seq(1,21, 2)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = , k = k)
error <- sum(knn.sum != test.label) / length(test.label)
return(error)
}
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
getDoParWorkers()
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"))
system.time(k.perf.std <- parSapply(cl, list(seq(1,21, 2)), function(x) compare.k(x, features.std, labels)))
clusterExport(cl, ls())
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, ls())
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
library(class)
library("doParallel")
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, ls())
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv", "k", "train", "label"), envir = environment())
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv", "k", "train", "label"), envir = environment())
registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, c("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
stopCluster(cl)
vignette("gettingstartedParallel")
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
library(class)
library("doParallel")
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = , k = k)
error <- sum(knn.sum != test.label) / length(test.label)
return(error)
}
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
system.time(k.perf.std <- sapply(seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- sapply(seq(1,21, 2), function(x) compare.k(x, features, labels)))
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != test.label) / length(test.label)
return(error)
}
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
library(class)
library("doParallel")
compare.k <- function(k, train, label) {
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != label) / length(label)
return(error)
}
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
system.time(k.perf <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features, labels)))
stopCluster(cl)
k.perf
k.perf.std
comparison <- data.frame(k = seq(1, 21, 2), raw.data.err = k.perf, std.data.err = k.perf.std)
comparison
write.csv(x = comparison, file = "data/knn/knn_data_error.csv")
write.csv(x = comparison, file = "data/knn/knn_data_error.csv")
library("reshape2")
comparison <- data.frame(k = seq(1, 21, 2), raw.feat.err = k.perf, std.feat.err = k.perf.std)
write.csv(x = comparison, file = "data/knn/knn_data_error.csv")
comparison.long <- melt(data = comparison, id.vars = "k", measure.vars = c("raw.feat.err", "std.feat.err"))
comparison.long
comparison.long <- melt(data = comparison, id.vars = "k",
measure.vars = c("raw.feat.err", "std.feat.err"),
variable.name = "error")
comparison.long
comparison.long <- melt(data = comparison, id.vars = "k",
measure.vars = c("raw.feat.err", "std.feat.err"),
variable.name = "Feature Type", value.name = "Error")
write.csv(x = comparison, file = "data/knn/knn_data_error.csv")
ggplot2::ggplot(data = comparison, aes(x = k,y = Error, color = "Feature Type" ))
library("ggplot2")
:ggplot(data = comparison, aes(x = k,y = Error, color = "Feature Type" ))
ggplot(data = comparison, aes(x = k,y = Error, color = "Feature Type" ))
ggplot(data = comparison, aes(x = k,y = Error, color = "Feature Type" )) +
geom_line()
comparison.long
ggplot(data = comparison.long, aes(x = k,y = Error, color = "Feature Type" )) +
geom_line()
comparison.long <- melt(data = comparison, id.vars = "k",
measure.vars = c("raw.feat.err", "std.feat.err"),
variable.name = "feature_type", value.name = "error")
ggplot(data = comparison.long, aes(x = k,y = error, color = Feature_type )) +
geom_line()
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line()
ggplot(data = comparison.long, aes(x = as.factor(k),y = error, color = feature_type )) +
geom_line()
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line() + geom_point()
library("ggthemes")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line() + geom_point() +scale_color_tableau()
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line() + geom_point() +scale_color_tableau() +
scale_x_continuous(breaks=k)
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line() + geom_point() +scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 2, type = 2) + geom_point(size = 2) +scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 2) + geom_point(size = 2) +scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 1) + geom_point(size = 2) +scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) +scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("Performance of k on features raw vs std")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_tableau() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_few() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_few(palette = "dark") +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_hue(palette = "dark") +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_hue() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_excel() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 2) + scale_color_wsj() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
get.features <- function() {
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
return(list(labels, features, features.std))
}
library("assertthat")
library("dplyr")
compare.k <- function(k, train, label) {
#compare errors for different k on features
assert_that(is.count(k))
assert_that(is.count(label))
assert_that(ncol(train) == 54)
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != label) / length(label)
return(error)
}
assert_that(is.count(labels))
assert_that(is.number(k))
assert_that(is.number(labels))
assert_that(is.number(labels))
assert_that(is.number(k))
k = "a"
assert_that(is.number(k))
assert_that(ncol(features) == 54)
compare.k <- function(k, train, label) {
#compare errors for different k on features
assert_that(is.number(k))
assert_that(ncol(train) == 54)
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != label) / length(label)
return(error)
}
label = labels
assert_that(is.number(sum(label)))
(is.factor(label)
)
(is.factor(label))
label
compare.k <- function(k, train, label) {
#compare errors for different k on features
assert_that(is.number(k))
assert_that(is.factor(label))
assert_that(ncol(train) == 54)
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != label) / length(label)
return(error)
}
get.features <- function() {
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
return(list(labels, features, features.std))
}
get.data <- function() {
labels <- read.csv("data/train_labels.csv", header = T,
nrows = 50000, colClasses = c("NULL", "factor"))[,1]
features <- read.csv("data/train_features.csv", header = T, nrows = 50000)[,-1]
features.std <- read.csv("data/train_features_std.csv", header = T, nrows = 50000)[,-1]
return(list(labels, features, features.std))
}
source("code/library.R")
data <- get.data()
labels <- data[[1]]
get.data
features <- data[[2]]
features.std <- data[[3]]
comparison <- read.csv(file = "data/knn/knn_data_error.csv", header = T)
comparison <- read.csv(file = "data/knn/knn_data_error.csv", header = T, colClasses = c("NULL"))
comparison <- read.csv(file = "data/knn/knn_data_error.csv", header = T, colClasses = c("NULL", "int"))
comparison <- read.csv(file = "data/knn/knn_data_error.csv", header = T)
comparison <- read.csv(file = "data/knn/knn_data_error.csv", header = T)[,-1]
comparison
comparison.long <- melt(data = comparison, id.vars = "k",
measure.vars = c("raw.feat.err", "std.feat.err"),
variable.name = "feature_type", value.name = "error")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 3) + scale_color_wsj() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) + geom_point(size = 3) + scale_color_wsj() +
scale_x_continuous(breaks= seq(1,21,2)) + ggtitle("k error (raw vs std features)")
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) +
geom_point(size = 3) +
scale_color_wsj() +
scale_x_continuous(breaks= seq(1,21,2)) +
ggtitle("k error (raw vs std features)") +
scale_colour_discrete(name  ="Feature Type", labels=c("Raw", "Standardised"))
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) +
geom_point(size = 3) +
scale_x_continuous(breaks= seq(1,21,2)) +
ggtitle("k error (raw vs std features)") +
scale_colour_discrete(name  ="Feature Type", labels=c("Raw", "Standardised")) +
scale_color_wsj()
ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) +
geom_point(size = 3) +
scale_x_continuous(breaks= seq(1,21,2)) +
ggtitle("k error (raw vs std features)") +
scale_color_wsj(name  ="Feature Type", labels=c("Raw", "Standardised"))
if(!require("class"))install.packages("class")
if(!require("doParallel"))install.packages("doParallel")
if(!require("reshape2"))install.packages("reshape2")
if(!require("ggplot2"))install.packages("ggplot2")
if(!require("ggthemes"))install.packages("ggthemes")
source("code/library.R")
data <- get.data()
labels <- data[[1]]
features <- data[[2]]
features.std <- data[[3]]
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
stopCluster(cl)
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
library("assertthat")
library("dplyr")
assert_that
if(!require("class"))install.packages("class")
if(!require("doParallel"))install.packages("doParallel")
if(!require("reshape2"))install.packages("reshape2")
if(!require("ggplot2"))install.packages("ggplot2")
if(!require("ggthemes"))install.packages("ggthemes")
source("code/library.R")
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
#call function to compare k error rates on features and standardised features
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
compare.k <- function(k, train, label) {
#compare errors for different k on features
assert_that(is.number(k))
assert_that(is.factor(label))
assert_that(ncol(train) == 54)
knn.sum <- knn.cv(train = train, cl = label, k = k)
error <- sum(knn.sum != label) / length(label)
return(error)
}
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "assertthat"), envir = environment())
registerDoParallel(cl)
source("code/library.R")
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "assertthat"), envir = environment())
if(!require("assertthat"))install.packages("assertthat")
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "assertthat"), envir = environment())
if(!require("class"))install.packages("class")
if(!require("doParallel"))install.packages("doParallel")
if(!require("reshape2"))install.packages("reshape2")
if(!require("ggplot2"))install.packages("ggplot2")
if(!require("ggthemes"))install.packages("ggthemes")
source("code/library.R")
cores <- detectCores()
cl <- makeCluster(cores)
clusterExport(cl, list("labels", "features", "features.std", "compare.k", "class", "knn.cv"), envir = environment())
registerDoParallel(cl)
system.time(k.perf.std <- parSapply(cl, seq(1,21, 2), function(x) compare.k(x, features.std, labels)))
plot1 <- ggplot(data = comparison.long, aes(x = k,y = error, color = feature_type )) +
geom_line(size = 0.5) +
geom_point(size = 3) +
scale_x_continuous(breaks= seq(1,21,2)) +
ggtitle("k error (raw vs std features)") +
scale_color_wsj(name  ="Feature Type", labels=c("Raw", "Standardised"))
jpeg(filename = 'kErrorFeature.jpg', units = "in", width = 5, height = 5, res = 400)
p1
jpeg(filename = 'kErrorFeature.jpg', units = "in", width = 5, height = 5, res = 400)
plot1
dev.off()
jpeg(filename = 'images/kErrorFeature.jpg', units = "in", width = 5, height = 5, res = 400)
dev.off()
jpeg(filename = 'images/kErrorFeature.jpg', units = "in", width = 5, height = 5, res = 400)
jpeg(filename = 'plots/kErrorFeature.jpg', units = "in", width = 5, height = 5, res = 400)
plot1
dev.off()
